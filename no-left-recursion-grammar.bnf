 program ::= extern_list decl_list 
           | decl_list
  extern_list ::= extern extern_list
               |  extern
  extern ::= "extern" type_spec IDENT "(" params ")" ";"
  decl_list ::= decl decl_list
             |  decl
  decl ::= var_decl 
        |  fun_decl
  var_decl ::= var_type IDENT ";" 
  type_spec ::= "void"
             |  var_type           
  var_type  ::= "int" |  "float" |  "bool"
  fun_decl ::= type_spec IDENT "(" params ")" block
  params ::= param_list  
          |  "void" | epsilon
  param_list ::= param param_list2
  param_list2 ::= "," param param_list | epsilon
  param ::= var_type IDENT
  block ::= "{" local_decls stmt_list "}"
  local_decls ::= local_decl local_decls
               |  epsilon
  local_decl ::= var_type IDENT ";"
  stmt_list ::= stmt stmt_list
             |  epsilon
  stmt ::= expr_stmt 
        |  block 
        |  if_stmt 
        |  while_stmt 
        |  return_stmt
  expr_stmt ::= expr ";" 
             |  ";"
  while_stmt ::= "while" "(" expr ")" stmt 
  if_stmt ::= "if" "(" expr ")" block else_stmt
  else_stmt  ::= "else" block
              |  epsilon
  return_stmt ::= "return" ";" 
               |  "return" expr ";"               
  # operators in order of increasing precedence    CANCER   
  expr ::= IDENT "=" expr
        | rval

  rval ::= term rval2
  rval2 ::= "||" term rval2 | epsilon

  term ::= equiv term2
  term2 ::= "&&" equiv term2 | epsilon

  equiv ::= rel equiv2
  equiv2 ::= "==" rel equiv2 | "!=" rel equiv2 | epsilon

  rel ::= subexpr rel2
  rel2 ::= "<=" subexpr rel2 | "<" subexpr rel2 | ">=" subexpr rel2 | ">" subexpr rel2 | epsilon

  subexpr ::= factor subexpr2
  subexpr2 ::= "+" factor subexpr2 | "-" factor subexpr2 | epsilon

  factor ::= element factor2
  factor2 ::= "*" element factor2 | "/" element factor2 | "%" element factor2 | epsilon
  
  element ::= "-" element | "!" element | "(" expr ")" | IDENT | IDENT "(" args ")" | INT_LIT | FLOAT_LIT | BOOL_LIT

  args ::= arg_list 
        |  epsilon
  arg_list ::= expr arg_list2
  arg_list2 ::= "," expr arg_list2 | epsilon